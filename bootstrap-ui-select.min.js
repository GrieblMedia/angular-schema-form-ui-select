angular.module("schemaForm").run(["$templateCache",function(e){e.put("directives/decorators/bootstrap/uiselect/multi.html",'<div class="form-group" ng-class="{\'has-error\': hasError(), \'has-success\': hasSuccess(), \'has-feedback\': form.feedback !== false}" ng-init="form.select_models=(form.schema.items| whereMulti : \'value\' : ($$value$$||[]))"><label class="control-label" ng-show="showTitle()">{{form.title}}</label><div class="form-group" ng-controller="UiSelectController"><ui-select multiple="" sortable-options="{{form.sortableOptions}}" ng-if="!(form.options.tagging||false)" ng-model="form.select_models" theme="bootstrap" on-select="$$value$$.push($item.value)" on-remove="$$value$$.splice($$value$$.indexOf($item.value), 1)" class="{{form.options.uiClass}}" append-to-body="true"><ui-select-match class="ui-select-match" placeholder="{{form.placeholder || form.schema.placeholder || (\'placeholders.select\' | translate)}}">{{$item.label}}</ui-select-match><ui-select-choices class="ui-select-choices" refresh="fetchResult(form.schema, form.options, $select.search)" refresh-delay="form.options.refreshDelay" group-by="form.options.groupBy" repeat="item in form.schema.items | propsFilter: {label: $select.search, description: (form.options.searchDescriptions===true ? $select.search : \'NOTSEARCHINGFORTHIS\') }"><div ng-bind-html="item.label | highlight: $select.search"></div><div ng-if="item.description"><span ng-bind-html="\'<small>\' + (\'\'+item.description | highlight: (form.options.searchDescriptions===true ? $select.search : \'NOTSEARCHINGFORTHIS\'))+ \'</small>\'"></span></div></ui-select-choices><ui-select-no-choice ng-hide="$select.refreshing || (form.schema.items && form.schema.items.length > 0)">{{\'common.labels.select_no_items\' | translate}}</ui-select-no-choice></ui-select><ui-select ng-controller="UiSelectController" multiple="" ng-if="(form.options.tagging||false) && !(form.options.groupBy || false)" tagging="form.options.tagging||false" tagging-label="form.options.taggingLabel" tagging-tokens="form.options.taggingTokens" sortable-options="{{form.sortableOptions}}" ng-model="form.select_models" theme="bootstrap" on-select="$$value$$.push($item.value)" on-remove="$$value$$.splice($$value$$.indexOf($item.value), 1)" class="{{form.options.uiClass}}" append-to-body="true"><ui-select-match class="ui-select-match" placeholder="{{form.placeholder || form.schema.placeholder || (\'placeholders.select\' | translate)}}">{{$item.label}}&nbsp;<small>{{($item.isTag===true ? form.options.taggingLabel : \'\')}}</small></ui-select-match><ui-select-choices class="ui-select-choices" refresh-delay="form.options.refreshDelay" refresh="fetchResult(form.schema, form.options, $select.search)" repeat="item in form.schema.items | propsFilter: {label: $select.search, description: (form.options.searchDescriptions===true ? $select.search : \'NOTSEARCHINGFORTHIS\') }"><div ng-if="item.isTag" ng-bind-html="\'<div>\' + (item.label | highlight: $select.search) + \' \' + form.options.taggingLabel + \'</div><div class=&quot;divider&quot;></div>\'"></div><div ng-if="!item.isTag" ng-bind-html="item.label + item.isTag | highlight: $select.search"></div><div ng-if="item.description"><span ng-bind-html="\'<small>\' + (\'\'+item.description | highlight: (form.options.searchDescriptions===true ? $select.search : \'NOTSEARCHINGFORTHIS\')) + \'</small>\'"></span></div></ui-select-choices><ui-select-no-choice ng-hide="$select.refreshing || (form.schema.items && form.schema.items.length > 0)">{{\'common.labels.select_no_items\' | translate}}</ui-select-no-choice></ui-select><ui-select ng-controller="UiSelectController" multiple="" ng-if="(form.options.tagging||false) && (form.options.groupBy || false)" tagging="form.options.tagging||false" tagging-label="form.options.taggingLabel" tagging-tokens="form.options.taggingTokens" sortable-options="{{form.sortableOptions}}" ng-model="form.select_models" theme="bootstrap" on-select="$$value$$.push($item.value)" on-remove="$$value$$.splice($$value$$.indexOf($item.value), 1)" class="{{form.options.uiClass}}" append-to-body="true"><ui-select-match class="ui-select-match" placeholder="{{form.placeholder || form.schema.placeholder || (\'placeholders.select\' | translate)}}">{{$item.label}}&nbsp;<small>{{($item.isTag===true ? form.options.taggingLabel : \'\')}}</small></ui-select-match><ui-select-choices class="ui-select-choices" group-by="form.options.groupBy" refresh-delay="form.options.refreshDelay" refresh="fetchResult(form.schema, form.options, $select.search)" repeat="item in form.schema.items | propsFilter: {label: $select.search, description: (form.options.searchDescriptions===true ? $select.search : \'NOTSEARCHINGFORTHIS\') }"><div ng-if="item.isTag" ng-bind-html="\'<div>\' + (item.label | highlight: $select.search) + \' \' + form.options.taggingLabel + \'</div><div class=&quot;divider&quot;></div>\'"></div><div ng-if="!item.isTag" ng-bind-html="item.label + item.isTag | highlight: $select.search"></div><div ng-if="item.description"><span ng-bind-html="\'<small>\' + (\'\'+item.description | highlight: (form.options.searchDescriptions===true ? $select.search : \'NOTSEARCHINGFORTHIS\')) + \'</small>\'"></span></div></ui-select-choices><ui-select-no-choice ng-hide="$select.refreshing || (form.schema.items && form.schema.items.length > 0)">{{\'common.labels.select_no_items\' | translate}}</ui-select-no-choice></ui-select><input name="{{form.key.slice(-1)[0]}}" toggle-model="" type="hidden" ng-model="insideModel" sf-changed="form" schema-validate="form"> <span ng-if="form.feedback !== false" class="form-control-feedback" ng-class="evalInScope(form.feedback) || {\'glyphicon\': true, \'glyphicon-ok\': hasSuccess(), \'glyphicon-remove\': hasError() }"></span><div class="help-block" ng-show="(hasError() && errorMessage(schemaError())) || form.description" ng-bind-html="(hasError() && errorMessage(schemaError())) || form.description"></div></div></div>'),e.put("directives/decorators/bootstrap/uiselect/single.html",'<div class="form-group" ng-class="{\'has-error\': hasError(), \'has-success\': hasSuccess(), \'has-feedback\': form.feedback !== false}" ng-init="select_models=(form.schema.items | where : {value: $$value$$})"><label class="control-label" ng-show="showTitle()">{{form.title}}</label><div class="form-group" ng-init="select_model.selected=select_models[0]"><div class="input-group"><ui-select ng-model="select_model.selected" ng-controller="UiSelectController" ng-if="!(form.options.tagging||false)" theme="bootstrap" ng-disabled="form.disabled" on-select="$$value$$=$item.value" class="{{form.options.uiClass}}" append-to-body="true"><ui-select-match class="ui-select-match" placeholder="{{form.placeholder || form.schema.placeholder || (\'placeholders.select\' | translate)}}"><div ng-bind-html="(select_model.selected.prefix ? select_model.selected.prefix : \'\') + select_model.selected.label"></div></ui-select-match><ui-select-choices class="ui-select-choices" refresh="fetchResult(form.schema, form.options, $select.search)" refresh-delay="form.options.refreshDelay" group-by="form.options.groupBy" repeat="item in form.schema.items | propsFilter: {label: $select.search, description: (form.options.searchDescriptions===true ? $select.search : \'NOTSEARCHINGFORTHIS\') }"><div ng-bind-html="(item.prefix ? \'<span>\' + item.prefix + \' </span>\' : \'\' ) + (item.label | highlight: $select.search)"></div><div ng-if="item.description"><span ng-bind-html="\'<small>\' + (\'\'+item.description | highlight: (form.options.searchDescriptions===true ? $select.search : \'NOTSEARCHINGFORTHIS\'))+ \'</small>\'"></span></div></ui-select-choices><ui-select-no-choice ng-hide="$select.refreshing || (form.schema.items && form.schema.items.length > 0)">{{\'common.labels.select_no_items\' | translate}}</ui-select-no-choice></ui-select><ui-select ng-controller="UiSelectController" ng-model="select_model.selected" ng-if="(form.options.tagging||false) && !(form.options.groupBy || false)" tagging="form.options.tagging||false" tagging-label="form.options.taggingLabel" tagging-tokens="form.options.taggingTokens" theme="bootstrap" ng-disabled="form.disabled" on-select="$$value$$=$item.value" class="{{form.options.uiClass}}" append-to-body="true"><ui-select-match class="ui-select-match" placeholder="{{form.placeholder || form.schema.placeholder || (\'placeholders.select\' | translate)}}"><div ng-bind-html="select_model.selected.label"></div>&nbsp;<small>{{(select_model.selected.isTag===true ? form.options.taggingLabel : \'\')}}</small></ui-select-match><ui-select-choices class="ui-select-choices" refresh="form.options.refreshMethod(form.schema, $select.search)" refresh-delay="form.options.refreshDelay" repeat="item in form.schema.items | propsFilter: {label: $select.search, description: (form.options.searchDescription===true ? $select.search : \'NOTSEARCHINGFORTHIS\') }"><div ng-if="item.isTag" ng-bind-html="\'<div>\' + (item.label | highlight: $select.search) + \' \' + form.options.taggingLabel + \'</div><div class=&quot;divider&quot;></div>\'"></div><div ng-if="!item.isTag" ng-bind-html="item.label + item.isTag| highlight: $select.search"></div><div ng-if="item.description"><span ng-bind-html="\'<small>\' + (\'\'+item.description | highlight: (form.options.searchDescriptions===true ? $select.search : \'NOTSEARCHINGFORTHIS\')) + \'</small>\'"></span></div></ui-select-choices><ui-select-no-choice ng-hide="$select.refreshing || (form.schema.items && form.schema.items.length > 0)">{{\'common.labels.select_no_items\' | translate}}</ui-select-no-choice></ui-select><ui-select ng-controller="UiSelectController" ng-model="select_model.selected" ng-if="(form.options.tagging||false) && (form.options.groupBy || false)" tagging="form.options.tagging||false" tagging-label="form.options.taggingLabel" tagging-tokens="form.options.taggingTokens" theme="bootstrap" ng-disabled="form.disabled" on-select="$$value$$=$item.value" class="{{form.options.uiClass}}" append-to-body="true"><ui-select-match class="ui-select-match" placeholder="{{form.placeholder || form.schema.placeholder || (\'placeholders.select\' | translate)}}"><div ng-bind-html="select_model.selected.label"></div>&nbsp;<small>{{(select_model.selected.isTag===true ? form.options.taggingLabel : \'\')}}</small></ui-select-match><ui-select-choices class="ui-select-choices" group-by="form.options.groupBy" refresh="form.options.refreshMethod(form.schema, $select.search)" refresh-delay="form.options.refreshDelay" repeat="item in form.schema.items | propsFilter: {label: $select.search, description: (form.options.searchDescription===true ? $select.search : \'NOTSEARCHINGFORTHIS\') }"><div ng-if="item.isTag" ng-bind-html="\'<div>\' + (item.label | highlight: $select.search) + \' \' + form.options.taggingLabel + \'</div><div class=&quot;divider&quot;></div>\'"></div><div ng-if="!item.isTag" ng-bind-html="item.label + item.isTag| highlight: $select.search"></div><div ng-if="item.description"><span ng-bind-html="\'<small>\' + (\'\'+item.description | highlight: (form.options.searchDescriptions===true ? $select.search : \'NOTSEARCHINGFORTHIS\')) + \'</small>\'"></span></div></ui-select-choices><ui-select-no-choice ng-hide="$select.refreshing || (form.schema.items && form.schema.items.length > 0)">{{\'common.labels.select_no_items\' | translate}}</ui-select-no-choice></ui-select><span class="input-group-btn"><button ng-click="$$value$$ = undefined" class="btn btn-default" type="button"><span class="fa fa-trash"></span></button></span></div><input name="{{form.key.slice(-1)[0]}}" type="hidden" toggle-single-model="" sf-changed="form" ng-model="insideModel" schema-validate="form"> <span ng-if="form.feedback !== false" class="form-control-feedback" ng-class="evalInScope(form.feedback) || {\'glyphicon\': true, \'glyphicon-ok\': hasSuccess(), \'glyphicon-remove\': hasError() }"></span><div class="help-block" ng-show="(hasError() && errorMessage(schemaError())) || form.description" ng-bind-html="(hasError() && errorMessage(schemaError())) || form.description"></div></div></div>')}]),angular.module("schemaForm").config(["schemaFormProvider","schemaFormDecoratorsProvider","sfPathProvider",function(i,e,l){var t=function(e,t,s){if("string"===t.type&&"uiselect"==t.format){var o=i.stdFormObj(e,t,s);return o.key=s.path,o.type="uiselect",s.lookup[l.stringify(s.path)]=o}};i.defaults.string.unshift(t);t=function(e,t,s){if("number"===t.type&&"uiselect"==t.format){var o=i.stdFormObj(e,t,s);return o.key=s.path,o.type="uiselect",s.lookup[l.stringify(s.path)]=o}};i.defaults.number.unshift(t);i.defaults.array.unshift(function(e,t,s){if("array"===t.type&&"uiselect"==t.format){var o=i.stdFormObj(e,t,s);return o.key=s.path,o.type="uimultiselect",s.lookup[l.stringify(s.path)]=o}}),e.addMapping("bootstrapDecorator","uiselect","directives/decorators/bootstrap/uiselect/single.html"),e.createDirective("uiselect","directives/decorators/bootstrap/uiselect/single.html"),e.addMapping("bootstrapDecorator","uimultiselect","directives/decorators/bootstrap/uiselect/multi.html"),e.createDirective("uimultiselect","directives/decorators/bootstrap/uiselect/multi.html")}]).directive("toggleSingleModel",function(o){return{require:"ngModel",restrict:"A",scope:{},replace:!0,controller:["$scope",function(r){var a=function(t,e){if(angular.isDefined(t)){var s=!1;angular.forEach(r.$parent.form.schema.items,function(e){e.value==t&&(r.$parent.select_model.selected=e,s=!0)}),!s&&e&&(r.$parent.select_model.selected=void 0),r.$parent.ngModel.$$parentForm.$pristine&&o(function(){r.$parent.ngModel&&r.$parent.ngModel.$setPristine(),r.$parent.ngModel&&r.$parent.ngModel.$$parentForm&&r.$parent.ngModel.$$parentForm.$setPristine()})}else r.$parent.select_model.selected=void 0},n=function(){var e=r.$parent.form.key;return r.$parent.state&&r.$parent.state.keyRedaction?e=e.slice(r.$parent.state.keyRedaction):Array.isArray(e)&&(e=e[0]),e};r.$parent.$watch("model.$$value$$".replace("$$value$$",n()),function(e){a(e,!1)}),r.$parent.$watch("form.schema.items",function(e,t){if(r.$parent.model&&r.$parent.model[n()]){var s=r.$parent.model[n()],o=function(e){return e.value===s};if(0===e.filter(o).length&&t){var i=t.filter(o);0<i.length&&e.splice(t.indexOf(i[0]),0,i[0])}var l=e.map(function(e){return e.value}).indexOf(s);r.$emit("ui.select.selectItem",l),a(r.$parent.model[n()],!1)}},!0),r.$parent.$watch("select_model.selected",function(){r.$parent.insideModel=r.$parent.select_model.selected?r.$parent.select_model.selected.value:void 0,r.$parent.ngModel.$setViewValue(r.$parent.select_model.selected?r.$parent.select_model.selected.value:void 0)}),r.$on("$destroy",function(){r.$parent.form.schema.items=[]})}]}}).directive("toggleModel",function(l){return{require:"ngModel",restrict:"A",scope:{},replace:!0,controller:["$scope","sfSelect",function(s,e){var t=e(s.$parent.form.key,s.$parent.model);angular.isUndefined(t)&&(t=[],e(s.$parent.form.key,s.$parent.model,t));var o=function(t,e){if(e)for(;s.$parent.form.select_models.length;)s.$parent.form.select_models.pop();angular.forEach(s.$parent.form.schema.items,function(e){angular.forEach(t,function(t){0===s.$parent.form.select_models.filter(function(e){return e.value==t}).length&&e.value==t&&s.$parent.form.select_models.push(e)})}),s.$parent.ngModel.$$parentForm.$pristine&&angular.isDefined(t)&&t.length&&l(function(){s.$parent.ngModel&&s.$parent.ngModel.$setPristine(),s.$parent.ngModel&&s.$parent.ngModel.$$parentForm&&s.$parent.ngModel.$$parentForm.$setPristine()})},i=function(){var e=s.$parent.form.key;return s.$parent.state&&s.$parent.state.keyRedaction?e=e.slice(s.$parent.state.keyRedaction):Array.isArray(e)&&(e=e[0]),e};s.$parent.$watch("model.$$value$$".replace("$$value$$",i()),function(e){o(e,!0)}),s.$parent.$watch("form.schema.items",function(e){s.$parent.model&&s.$parent.model[i()]&&o(s.$parent.model[i()])},!0),s.$parent.$watch("form.select_models",function(){0==s.$parent.form.select_models.length?(s.$parent.insideModel=s.$parent.$$value$$,null!=s.$parent.ngModel.$viewValue&&s.$parent.ngModel.$setViewValue(s.$parent.form.select_models)):(s.$parent.insideModel=s.$parent.form.select_models,s.$parent.ngModel.$setViewValue(s.$parent.form.select_models))},!0),s.$on("$destroy",function(){s.$parent.form.schema.items=[]})}]}}).filter("whereMulti",function(){return function(s,o,e){var i=[];return angular.isArray(e)?e.forEach(function(e){for(var t=0;t<s.length;t++)if(e==s[t][o]){i.push(s[t]);break}}):i=s,i}}).filter("propsFilter",function(){return function(e,r){var a=[];return angular.isArray(e)?e.forEach(function(e){for(var t=!1,s=Object.keys(r),o=0;o<s.length;o++){var i=s[o];if(e.hasOwnProperty(i)){var l=r[i].toLowerCase();if(e[i]&&0===e[i].toString().toLowerCase().indexOf(l)||e[i]&&-1!==e[i].toString().toLowerCase().indexOf(" "+l)){t=!0;break}}}t&&a.push(e)}):a=e,a}}).controller("UiSelectController",["$scope","$http",function(e,i){e.fetchResult=function(t,s,e){if(s)if(s.callback){var o="function"==typeof s.callback?s.callback:new Function(s.callback);t.items=o(t,s,e)}else{if(s.http_post)return i.post(s.http_post.url,s.http_post.parameter).then(function(e){t.items=e.data},function(e,t){alert("Loading select items failed (URL: '"+String(s.http_post.url)+"' Parameter: "+String(s.http_post.parameter)+"\nError: "+t)});if(s.http_get)return i.get(s.http_get.url,s.http_get.parameter).then(function(e){t.items=e.data},function(e,t){alert("Loading select items failed (URL: '"+String(s.http_get.url)+"\nError: "+t)});if(s.async)return(o="function"==typeof s.async.call?s.async.call:new Function(s.async.call))(t,s,e).then(function(e){t.items=e.data},function(e,t){alert("Loading select items failed(Options: '"+String(s)+"\nError: "+t)})}}}]);