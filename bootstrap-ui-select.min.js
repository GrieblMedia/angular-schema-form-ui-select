angular.module("schemaForm").run(["$templateCache",function(e){e.put("directives/decorators/bootstrap/uiselect/multi.html",'<div class="form-group" ng-class="{\'has-error\': hasError(), \'has-success\': hasSuccess(), \'has-feedback\': form.feedback !== false}" ng-init="form.select_models=(form.schema.items| whereMulti : \'value\' : ($$value$$||[]))"><label class="control-label" ng-show="showTitle()">{{form.title}}</label><div class="form-group" ng-controller="UiSelectController"><ui-select multiple="" sortable-options="{{form.sortableOptions}}" ng-if="!(form.options.tagging||false)" ng-model="form.select_models" theme="bootstrap" on-select="$$value$$.push($item.value)" on-remove="$$value$$.splice($$value$$.indexOf($item.value), 1)" class="{{form.options.uiClass}}" append-to-body="true"><ui-select-match class="ui-select-match" placeholder="{{form.placeholder || form.schema.placeholder || (\'placeholders.select\' | translate)}}">{{$item.label}}</ui-select-match><ui-select-choices class="ui-select-choices" refresh="fetchResult(form.schema, form.options, $select.search)" refresh-delay="form.options.refreshDelay" group-by="form.options.groupBy" repeat="item in form.schema.items | propsFilter: {label: $select.search, description: (form.options.searchDescriptions===true ? $select.search : \'NOTSEARCHINGFORTHIS\') }"><div ng-bind-html="item.label | highlight: $select.search"></div><div ng-if="item.description"><span ng-bind-html="\'<small>\' + (\'\'+item.description | highlight: (form.options.searchDescriptions===true ? $select.search : \'NOTSEARCHINGFORTHIS\'))+ \'</small>\'"></span></div></ui-select-choices><ui-select-no-choice ng-hide="$select.refreshing || (form.schema.items && form.schema.items.length > 0)">{{\'common.labels.select_no_items\' | translate}}</ui-select-no-choice></ui-select><ui-select ng-controller="UiSelectController" multiple="" ng-if="(form.options.tagging||false) && !(form.options.groupBy || false)" tagging="form.options.tagging||false" tagging-label="form.options.taggingLabel" tagging-tokens="form.options.taggingTokens" sortable-options="{{form.sortableOptions}}" ng-model="form.select_models" theme="bootstrap" on-select="$$value$$.push($item.value)" on-remove="$$value$$.splice($$value$$.indexOf($item.value), 1)" class="{{form.options.uiClass}}" append-to-body="true"><ui-select-match class="ui-select-match" placeholder="{{form.placeholder || form.schema.placeholder || (\'placeholders.select\' | translate)}}">{{$item.label}}&nbsp;<small>{{($item.isTag===true ? form.options.taggingLabel : \'\')}}</small></ui-select-match><ui-select-choices class="ui-select-choices" refresh-delay="form.options.refreshDelay" refresh="fetchResult(form.schema, form.options, $select.search)" repeat="item in form.schema.items | propsFilter: {label: $select.search, description: (form.options.searchDescriptions===true ? $select.search : \'NOTSEARCHINGFORTHIS\') }"><div ng-if="item.isTag" ng-bind-html="\'<div>\' + (item.label | highlight: $select.search) + \' \' + form.options.taggingLabel + \'</div><div class=&quot;divider&quot;></div>\'"></div><div ng-if="!item.isTag" ng-bind-html="item.label + item.isTag | highlight: $select.search"></div><div ng-if="item.description"><span ng-bind-html="\'<small>\' + (\'\'+item.description | highlight: (form.options.searchDescriptions===true ? $select.search : \'NOTSEARCHINGFORTHIS\')) + \'</small>\'"></span></div></ui-select-choices><ui-select-no-choice ng-hide="$select.refreshing || (form.schema.items && form.schema.items.length > 0)">{{\'common.labels.select_no_items\' | translate}}</ui-select-no-choice></ui-select><ui-select ng-controller="UiSelectController" multiple="" ng-if="(form.options.tagging||false) && (form.options.groupBy || false)" tagging="form.options.tagging||false" tagging-label="form.options.taggingLabel" tagging-tokens="form.options.taggingTokens" sortable-options="{{form.sortableOptions}}" ng-model="form.select_models" theme="bootstrap" on-select="$$value$$.push($item.value)" on-remove="$$value$$.splice($$value$$.indexOf($item.value), 1)" class="{{form.options.uiClass}}" append-to-body="true"><ui-select-match class="ui-select-match" placeholder="{{form.placeholder || form.schema.placeholder || (\'placeholders.select\' | translate)}}">{{$item.label}}&nbsp;<small>{{($item.isTag===true ? form.options.taggingLabel : \'\')}}</small></ui-select-match><ui-select-choices class="ui-select-choices" group-by="form.options.groupBy" refresh-delay="form.options.refreshDelay" refresh="fetchResult(form.schema, form.options, $select.search)" repeat="item in form.schema.items | propsFilter: {label: $select.search, description: (form.options.searchDescriptions===true ? $select.search : \'NOTSEARCHINGFORTHIS\') }"><div ng-if="item.isTag" ng-bind-html="\'<div>\' + (item.label | highlight: $select.search) + \' \' + form.options.taggingLabel + \'</div><div class=&quot;divider&quot;></div>\'"></div><div ng-if="!item.isTag" ng-bind-html="item.label + item.isTag | highlight: $select.search"></div><div ng-if="item.description"><span ng-bind-html="\'<small>\' + (\'\'+item.description | highlight: (form.options.searchDescriptions===true ? $select.search : \'NOTSEARCHINGFORTHIS\')) + \'</small>\'"></span></div></ui-select-choices><ui-select-no-choice ng-hide="$select.refreshing || (form.schema.items && form.schema.items.length > 0)">{{\'common.labels.select_no_items\' | translate}}</ui-select-no-choice></ui-select><input name="{{form.key.slice(-1)[0]}}" toggle-model="" type="hidden" ng-model="insideModel" sf-changed="form" schema-validate="form"> <span ng-if="form.feedback !== false" class="form-control-feedback" ng-class="evalInScope(form.feedback) || {\'glyphicon\': true, \'glyphicon-ok\': hasSuccess(), \'glyphicon-remove\': hasError() }"></span><div class="help-block" ng-show="(hasError() && errorMessage(schemaError())) || form.description" ng-bind-html="(hasError() && errorMessage(schemaError())) || form.description"></div></div></div>'),e.put("directives/decorators/bootstrap/uiselect/single.html",'<div class="form-group" ng-class="{\'has-error\': hasError(), \'has-success\': hasSuccess(), \'has-feedback\': form.feedback !== false}" ng-init="select_models=(form.schema.items | where : {value: $$value$$})"><label class="control-label" ng-show="showTitle()">{{form.title}}</label><div class="form-group" ng-init="select_model.selected=select_models[0]"><div class="input-group"><ui-select ng-model="select_model.selected" ng-controller="UiSelectController" ng-if="!(form.options.tagging||false)" theme="bootstrap" ng-disabled="form.disabled" on-select="$$value$$=$item.value" class="{{form.options.uiClass}}" append-to-body="true"><ui-select-match class="ui-select-match" placeholder="{{form.placeholder || form.schema.placeholder || (\'placeholders.select\' | translate)}}"><div ng-bind-html="(select_model.selected.prefix ? select_model.selected.prefix : \'\') + select_model.selected.label"></div></ui-select-match><ui-select-choices class="ui-select-choices" refresh="fetchResult(form.schema, form.options, $select.search)" refresh-delay="form.options.refreshDelay" group-by="form.options.groupBy" repeat="item in form.schema.items | propsFilter: {label: $select.search, description: (form.options.searchDescriptions===true ? $select.search : \'NOTSEARCHINGFORTHIS\') }"><div ng-bind-html="(item.prefix ? \'<span>\' + item.prefix + \' </span>\' : \'\' ) + (item.label | highlight: $select.search)"></div><div ng-if="item.description"><span ng-bind-html="\'<small>\' + (\'\'+item.description | highlight: (form.options.searchDescriptions===true ? $select.search : \'NOTSEARCHINGFORTHIS\'))+ \'</small>\'"></span></div></ui-select-choices><ui-select-no-choice ng-hide="$select.refreshing || (form.schema.items && form.schema.items.length > 0)">{{\'common.labels.select_no_items\' | translate}}</ui-select-no-choice></ui-select><ui-select ng-controller="UiSelectController" ng-model="select_model.selected" ng-if="(form.options.tagging||false) && !(form.options.groupBy || false)" tagging="form.options.tagging||false" tagging-label="form.options.taggingLabel" tagging-tokens="form.options.taggingTokens" theme="bootstrap" ng-disabled="form.disabled" on-select="$$value$$=$item.value" class="{{form.options.uiClass}}" append-to-body="true"><ui-select-match class="ui-select-match" placeholder="{{form.placeholder || form.schema.placeholder || (\'placeholders.select\' | translate)}}"><div ng-bind-html="select_model.selected.label"></div>&nbsp;<small>{{(select_model.selected.isTag===true ? form.options.taggingLabel : \'\')}}</small></ui-select-match><ui-select-choices class="ui-select-choices" refresh="form.options.refreshMethod(form.schema, $select.search)" refresh-delay="form.options.refreshDelay" repeat="item in form.schema.items | propsFilter: {label: $select.search, description: (form.options.searchDescription===true ? $select.search : \'NOTSEARCHINGFORTHIS\') }"><div ng-if="item.isTag" ng-bind-html="\'<div>\' + (item.label | highlight: $select.search) + \' \' + form.options.taggingLabel + \'</div><div class=&quot;divider&quot;></div>\'"></div><div ng-if="!item.isTag" ng-bind-html="item.label + item.isTag| highlight: $select.search"></div><div ng-if="item.description"><span ng-bind-html="\'<small>\' + (\'\'+item.description | highlight: (form.options.searchDescriptions===true ? $select.search : \'NOTSEARCHINGFORTHIS\')) + \'</small>\'"></span></div></ui-select-choices><ui-select-no-choice ng-hide="$select.refreshing || (form.schema.items && form.schema.items.length > 0)">{{\'common.labels.select_no_items\' | translate}}</ui-select-no-choice></ui-select><ui-select ng-controller="UiSelectController" ng-model="select_model.selected" ng-if="(form.options.tagging||false) && (form.options.groupBy || false)" tagging="form.options.tagging||false" tagging-label="form.options.taggingLabel" tagging-tokens="form.options.taggingTokens" theme="bootstrap" ng-disabled="form.disabled" on-select="$$value$$=$item.value" class="{{form.options.uiClass}}" append-to-body="true"><ui-select-match class="ui-select-match" placeholder="{{form.placeholder || form.schema.placeholder || (\'placeholders.select\' | translate)}}"><div ng-bind-html="select_model.selected.label"></div>&nbsp;<small>{{(select_model.selected.isTag===true ? form.options.taggingLabel : \'\')}}</small></ui-select-match><ui-select-choices class="ui-select-choices" group-by="form.options.groupBy" refresh="form.options.refreshMethod(form.schema, $select.search)" refresh-delay="form.options.refreshDelay" repeat="item in form.schema.items | propsFilter: {label: $select.search, description: (form.options.searchDescription===true ? $select.search : \'NOTSEARCHINGFORTHIS\') }"><div ng-if="item.isTag" ng-bind-html="\'<div>\' + (item.label | highlight: $select.search) + \' \' + form.options.taggingLabel + \'</div><div class=&quot;divider&quot;></div>\'"></div><div ng-if="!item.isTag" ng-bind-html="item.label + item.isTag| highlight: $select.search"></div><div ng-if="item.description"><span ng-bind-html="\'<small>\' + (\'\'+item.description | highlight: (form.options.searchDescriptions===true ? $select.search : \'NOTSEARCHINGFORTHIS\')) + \'</small>\'"></span></div></ui-select-choices><ui-select-no-choice ng-hide="$select.refreshing || (form.schema.items && form.schema.items.length > 0)">{{\'common.labels.select_no_items\' | translate}}</ui-select-no-choice></ui-select><span class="input-group-btn"><button ng-click="$$value$$ = undefined" class="btn btn-default" type="button"><span class="fa fa-trash"></span></button></span></div><input name="{{form.key.slice(-1)[0]}}" type="hidden" toggle-single-model="" sf-changed="form" ng-model="insideModel" schema-validate="form"> <span ng-if="form.feedback !== false" class="form-control-feedback" ng-class="evalInScope(form.feedback) || {\'glyphicon\': true, \'glyphicon-ok\': hasSuccess(), \'glyphicon-remove\': hasError() }"></span><div class="help-block" ng-show="(hasError() && errorMessage(schemaError())) || form.description" ng-bind-html="(hasError() && errorMessage(schemaError())) || form.description"></div></div></div>')}]),angular.module("schemaForm").config(["schemaFormProvider","schemaFormDecoratorsProvider","sfPathProvider",function(e,t,s){var o=function(t,o,i){if("string"===o.type&&"uiselect"==o.format){var l=e.stdFormObj(t,o,i);return l.key=i.path,l.type="uiselect",i.lookup[s.stringify(i.path)]=l,l}};e.defaults.string.unshift(o);var o=function(t,o,i){if("number"===o.type&&"uiselect"==o.format){var l=e.stdFormObj(t,o,i);return l.key=i.path,l.type="uiselect",i.lookup[s.stringify(i.path)]=l,l}};e.defaults.number.unshift(o);var i=function(t,o,i){if("array"===o.type&&"uiselect"==o.format){var l=e.stdFormObj(t,o,i);return l.key=i.path,l.type="uimultiselect",i.lookup[s.stringify(i.path)]=l,l}};e.defaults.array.unshift(i),t.addMapping("bootstrapDecorator","uiselect","directives/decorators/bootstrap/uiselect/single.html"),t.createDirective("uiselect","directives/decorators/bootstrap/uiselect/single.html"),t.addMapping("bootstrapDecorator","uimultiselect","directives/decorators/bootstrap/uiselect/multi.html"),t.createDirective("uimultiselect","directives/decorators/bootstrap/uiselect/multi.html")}]).directive("toggleSingleModel",function(e){return{require:"ngModel",restrict:"A",scope:{},replace:!0,controller:["$scope",function(t){var s=function(s,o){if(angular.isDefined(s)){var i=!1;angular.forEach(t.$parent.form.schema.items,function(e){e.value==s&&(t.$parent.select_model.selected=e,i=!0)}),!i&&o&&(t.$parent.select_model.selected=void 0),t.$parent.ngModel.$$parentForm.$pristine&&e(function(){t.$parent.ngModel?t.$parent.ngModel.$setPristine():!1,t.$parent.ngModel&&t.$parent.ngModel.$$parentForm?t.$parent.ngModel.$$parentForm.$setPristine():!1})}else t.$parent.select_model.selected=void 0},o=function(){var e=t.$parent.form.key;return t.$parent.state&&t.$parent.state.keyRedaction?e=e.slice(t.$parent.state.keyRedaction):Array.isArray(e)&&(e=e[0]),e};t.$parent.$watch("model.$$value$$".replace("$$value$$",o()),function(e){s(e,!1)}),t.$parent.$watch("form.schema.items",function(){t.$parent.model&&t.$parent.model[o()]&&s(t.$parent.model[o()],!1)},!0),t.$parent.$watch("select_model.selected",function(){t.$parent.insideModel=t.$parent.select_model.selected?t.$parent.select_model.selected.value:void 0,t.$parent.ngModel.$setViewValue(t.$parent.select_model.selected?t.$parent.select_model.selected.value:void 0)})}]}}).directive("toggleModel",function(e){return{require:"ngModel",restrict:"A",scope:{},replace:!0,controller:["$scope","sfSelect",function(t,s){var o=s(t.$parent.form.key,t.$parent.model);angular.isUndefined(o)&&(o=[],s(t.$parent.form.key,t.$parent.model,o));var i=function(s,o){if(o)for(;t.$parent.form.select_models.length;)t.$parent.form.select_models.pop();angular.forEach(t.$parent.form.schema.items,function(e){angular.forEach(s,function(s){var o=t.$parent.form.select_models.filter(function(e){return e.value==s});0===o.length&&e.value==s&&t.$parent.form.select_models.push(e)})}),t.$parent.ngModel.$$parentForm.$pristine&&angular.isDefined(s)&&s.length&&e(function(){t.$parent.ngModel?t.$parent.ngModel.$setPristine():!1,t.$parent.ngModel&&t.$parent.ngModel.$$parentForm?t.$parent.ngModel.$$parentForm.$setPristine():!1})},l=function(){var e=t.$parent.form.key;return t.$parent.state&&t.$parent.state.keyRedaction?e=e.slice(t.$parent.state.keyRedaction):Array.isArray(e)&&(e=e[0]),e};t.$parent.$watch("model.$$value$$".replace("$$value$$",l()),function(e){i(e,!0)}),t.$parent.$watch("form.schema.items",function(e){t.$parent.model&&t.$parent.model[l()]&&i(t.$parent.model[l()])},!0),t.$parent.$watch("form.select_models",function(){0==t.$parent.form.select_models.length?(t.$parent.insideModel=t.$parent.$$value$$,void 0!=t.$parent.ngModel.$viewValue&&t.$parent.ngModel.$setViewValue(t.$parent.form.select_models)):(t.$parent.insideModel=t.$parent.form.select_models,t.$parent.ngModel.$setViewValue(t.$parent.form.select_models))},!0)}]}}).filter("whereMulti",function(){return function(e,t,s){var o=[];return angular.isArray(s)?s.forEach(function(s){for(var i=0;i<e.length;i++)if(s==e[i][t]){o.push(e[i]);break}}):o=e,o}}).filter("propsFilter",function(){return function(e,t){var s=[];return angular.isArray(e)?e.forEach(function(e){for(var o=!1,i=Object.keys(t),l=0;l<i.length;l++){var r=i[l];if(e.hasOwnProperty(r)){var a=t[r].toLowerCase();if(e[r]&&0===e[r].toString().toLowerCase().indexOf(a)||e[r]&&-1!==e[r].toString().toLowerCase().indexOf(" "+a)){o=!0;break}}}o&&s.push(e)}):s=e,s}}).controller("UiSelectController",["$scope","$http",function(e,t){e.fetchResult=function(e,s,o){if(s)if(s.callback){var i="function"==typeof s.callback?s.callback:new Function(s.callback);e.items=i(e,s,o)}else{if(s.http_post)return t.post(s.http_post.url,s.http_post.parameter).then(function(t){e.items=t.data},function(e,t){alert("Loading select items failed (URL: '"+String(s.http_post.url)+"' Parameter: "+String(s.http_post.parameter)+"\nError: "+t)});if(s.http_get)return t.get(s.http_get.url,s.http_get.parameter).then(function(t){e.items=t.data},function(e,t){alert("Loading select items failed (URL: '"+String(s.http_get.url)+"\nError: "+t)});if(s.async){var i="function"==typeof s.async.call?s.async.call:new Function(s.async.call);return i(e,s,o).then(function(t){e.items=t.data},function(e,t){alert("Loading select items failed(Options: '"+String(s)+"\nError: "+t)})}}}}]);